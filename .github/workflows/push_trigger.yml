name: Maven Package upon a push

on:
  push:
    branches:
      - '!release-branch'
      - release-1*
      - master
      - 1.*
      - develop
      - MOSIP*

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SERVICE_LOCATION: mosip-packet-creator
      CONFIG_LOCATION: 'src/main/resources/dockersupport/centralized/mosip-packet-creator'
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          ref: ${{ github.ref }}
          java-version: 11
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}

      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils

      - name: Setup the settings file for ossrh server
        run: echo "<settings>   <servers>    <server>       <id>ossrh</id>     </server>    </servers>   <profiles>     <profile>       <id>ossrh</id>       <activation>         <activeByDefault>true</activeByDefault>       </activation>         </profile>   <profile>      <id>allow-snapshots</id>         <activation><activeByDefault>true</activeByDefault></activation>      <repositories>        <repository>          <id>snapshots-repo</id>          <url>https://oss.sonatype.org/content/repositories/snapshots</url>          <releases><enabled>false</enabled></releases>          <snapshots><enabled>true</enabled></snapshots>        </repository>          <repository>          <id>releases-repo</id>          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>          <releases><enabled>false</enabled></releases>          <snapshots><enabled>false</enabled></snapshots>        </repository>       </repositories>    </profile>    </profiles> </settings> " > $GITHUB_WORKSPACE/settings.xml


      - name: Build mosipTestDataProvider with Maven
        run: |
          cd mosipTestDataProvider
          mvn clean install -s $GITHUB_WORKSPACE/settings.xml

      - name: Build mosip-packet-creator with Maven
        run: |
          cd mosip-packet-creator
          mvn clean install -s $GITHUB_WORKSPACE/settings.xml

      - name: Ready the springboot artifacts
        run: |
          cd mosip-packet-creator
          mkdir build_files
          cp $( find -name 'mosip-packet-creator-*.jar' -type f ) build_files
          cp -r ${{env.CONFIG_LOCATION}}/Biometric\ Devices build_files/Biometric\ Devices
          cp -r ${{env.CONFIG_LOCATION}}/config build_files/config
          cp -r ${{env.CONFIG_LOCATION}}/resource build_files/resource
          cp -r ${{env.CONFIG_LOCATION}}/application.properties build_files/application.properties
          zip -r release.zip build_files/*

      - name: Upload the springboot jars
        uses: actions/upload-artifact@v1
        with:
          name: release
          path: ./mosip-packet-creator/release.zip

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} # required
        if: failure() # Pick up events even if the job fails or is canceled.

  build-mosip-packet-creator:
    needs: build
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: mosip-packet-creator
      SERVICE_LOCATION: mosip-packet-creator

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./${{env.SERVICE_LOCATION}}

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo ${{ env.BRANCH_NAME }}

      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name:  Extract the mosip-packet-creator jar and its dependency configs
        run: |
          cd  ./${{env.SERVICE_LOCATION}} 
          unzip "release.zip"

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Build image
        run: |
          cd  ./${{env.SERVICE_LOCATION}}
          mkdir docker-image-build
          cp -r ./build_files ./docker-image-build/build_files
          cp -r ./entrypoint.sh ./docker-image-build/entrypoint.sh
          cp ./Dockerfile  ./docker-image-build/Dockerfile
          
          cd docker-image-build
          docker build . --file Dockerfile --build-arg SOURCE=mosip --build-arg COMMIT_HASH=$(git rev-parse HEAD) --build-arg COMMIT_ID=$(git rev-parse --short HEAD) --build-arg BUILD_TIME=${{steps.date.outputs.date}} --tag ${{ env.SERVICE_NAME }}

      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          if [[ $BRANCH_NAME == master ]]; then
            VERSION=latest
          else
            VERSION=$BRANCH_NAME
          fi
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }} # required
        if: failure() # Pick up events even if the job fails or is canceled.